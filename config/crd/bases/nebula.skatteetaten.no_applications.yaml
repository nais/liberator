
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.6.2
  creationTimestamp: null
  name: applications.nebula.skatteetaten.no
spec:
  group: nebula.skatteetaten.no
  names:
    kind: Application
    listKind: ApplicationList
    plural: applications
    shortNames:
    - nap
    singular: application
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.synchronizationState
      name: State
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Application is the Schema for the applications API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ApplicationSpec defines the desired state of Application
            properties:
              auroraApplication:
                description: Set this flag if the application is build onPrem, this
                  will add the default volume mounts an AuroraApplication requires
                type: boolean
              azure:
                properties:
                  cosmosDb:
                    additionalProperties:
                      properties:
                        disabled:
                          type: boolean
                        mongoDBVersion:
                          description: For now if you set monoDbVersion you will get
                            mongo, else you will get GlocalDb with sql
                          type: string
                        name:
                          type: string
                      required:
                      - name
                      type: object
                    type: object
                  postgresDatabase:
                    additionalProperties:
                      properties:
                        disabled:
                          type: boolean
                        name:
                          type: string
                        server:
                          type: string
                        users:
                          additionalProperties:
                            properties:
                              disabled:
                                type: boolean
                              name:
                                type: string
                              role:
                                type: string
                            required:
                            - name
                            - role
                            type: object
                          type: object
                      required:
                      - name
                      - server
                      - users
                      type: object
                    type: object
                  resourceGroup:
                    type: string
                  storageAccount:
                    additionalProperties:
                      properties:
                        disabled:
                          type: boolean
                        name:
                          type: string
                      required:
                      - name
                      type: object
                    type: object
                required:
                - resourceGroup
                type: object
              egress:
                properties:
                  external:
                    additionalProperties:
                      properties:
                        disabled:
                          type: boolean
                        host:
                          type: string
                        ports:
                          items:
                            properties:
                              name:
                                type: string
                              port:
                                type: integer
                              protocol:
                                type: string
                            required:
                            - port
                            type: object
                          type: array
                      required:
                      - host
                      type: object
                    type: object
                  internal:
                    additionalProperties:
                      properties:
                        application:
                          type: string
                        disabled:
                          type: boolean
                        namespace:
                          type: string
                        ports:
                          items:
                            properties:
                              name:
                                type: string
                              port:
                                type: integer
                              protocol:
                                type: string
                            required:
                            - port
                            type: object
                          type: array
                      type: object
                    type: object
                type: object
              imagePolicy:
                description: Foo is an example field of Application. Edit application_types.go
                  to remove/update
                properties:
                  branch:
                    type: string
                  disabled:
                    type: boolean
                  semver:
                    type: string
                type: object
              ingress:
                properties:
                  internal:
                    additionalProperties:
                      properties:
                        application:
                          type: string
                        disabled:
                          type: boolean
                        methods:
                          items:
                            type: string
                          type: array
                        namespace:
                          type: string
                        paths:
                          items:
                            type: string
                          type: array
                        ports:
                          items:
                            properties:
                              name:
                                type: string
                              port:
                                type: integer
                              protocol:
                                type: string
                            required:
                            - port
                            type: object
                          type: array
                      type: object
                    type: object
                  public:
                    additionalProperties:
                      properties:
                        disabled:
                          type: boolean
                        gateway:
                          type: string
                        hostPrefix:
                          type: string
                        overrideHostname:
                          type: string
                        port:
                          type: integer
                        serviceport:
                          type: integer
                      type: object
                    type: object
                type: object
              pod:
                properties:
                  command:
                    items:
                      type: string
                    type: array
                  env:
                    description: Custom environment variables injected into your container.
                      Specify either `value` or `valueFrom`, but not both.
                    items:
                      properties:
                        name:
                          description: Environment variable name. May only contain
                            letters, digits, and the underscore `_` character.
                          type: string
                        value:
                          description: Environment variable value. Numbers and boolean
                            values must be quoted. Required unless `valueFrom` is
                            specified.
                          type: string
                        valueFrom:
                          description: Dynamically set environment variables based
                            on fields found in the Pod spec.
                          properties:
                            fieldRef:
                              properties:
                                fieldPath:
                                  description: Field value from the `Pod` spec that
                                    should be copied into the environment variable.
                                  enum:
                                  - ""
                                  - metadata.name
                                  - metadata.namespace
                                  - metadata.labels
                                  - metadata.annotations
                                  - spec.nodeName
                                  - spec.serviceAccountName
                                  - status.hostIP
                                  - status.podIP
                                  type: string
                              required:
                              - fieldPath
                              type: object
                          required:
                          - fieldRef
                          type: object
                      required:
                      - name
                      type: object
                    type: array
                  envFrom:
                    description: "EnvFrom exposes all variables in the ConfigMap or
                      Secret resources as environment variables. One of `configMap`
                      or `secret` is required. \n Environment variables will take
                      the form `KEY=VALUE`, where `key` is the ConfigMap or Secret
                      key. You can specify as many keys as you like in a single ConfigMap
                      or Secret. \n The ConfigMap and Secret resources must live in
                      the same Kubernetes namespace as the Application resource."
                    items:
                      properties:
                        configmap:
                          description: Name of the `ConfigMap` where environment variables
                            are specified. Required unless `secret` is set.
                          type: string
                        secret:
                          description: Name of the `Secret` where environment variables
                            are specified. Required unless `configMap` is set.
                          type: string
                      type: object
                    type: array
                  filesFrom:
                    description: "List of ConfigMap or Secret resources that will
                      have their contents mounted into the containers as files. Either
                      `configMap` or `secret` is required. \n Files will take the
                      path `<mountPath>/<key>`, where `key` is the ConfigMap or Secret
                      key. You can specify as many keys as you like in a single ConfigMap
                      or Secret, and they will all be mounted to the same directory.
                      \n The ConfigMap and Secret resources must live in the same
                      Kubernetes namespace as the Application resource."
                    items:
                      properties:
                        configmap:
                          description: Name of the `ConfigMap` that contains files
                            that should be mounted into the container. Required unless
                            `secret` or `persistentVolumeClaim` is set.
                          type: string
                        mountPath:
                          description: "Filesystem path inside the pod where files
                            are mounted. The directory will be created if it does
                            not exist. If the directory exists, any files in the directory
                            will be made unaccessible. \n Defaults to `/var/run/configmaps/<NAME>`,
                            `/var/run/secrets`, or `/var/run/pvc/<NAME>`, depending
                            on which of them is specified."
                          type: string
                        persistentVolumeClaim:
                          description: Name of the `PersistentVolumeClaim` that should
                            be mounted into the container. Required unless `configMap`
                            or `secret` is set. This feature requires coordination
                            with the NAIS team.
                          type: string
                        secret:
                          description: Name of the `Secret` that contains files that
                            should be mounted into the container. Required unless
                            `configMap` or `persistentVolumeClaim` is set. If mounting
                            multiple secrets, `mountPath` *MUST* be set to avoid collisions.
                          type: string
                      type: object
                    type: array
                  image:
                    type: string
                  liveness:
                    description: Many applications running for long periods of time
                      eventually transition to broken states, and cannot recover except
                      by being restarted. Kubernetes provides liveness probes to detect
                      and remedy such situations. Read more about this over at the
                      [Kubernetes probes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/).
                    properties:
                      failureThreshold:
                        description: When a Pod starts, and the probe fails, Kubernetes
                          will try _failureThreshold_ times before giving up. Giving
                          up in case of a startup probe means restarting the Pod.
                        type: integer
                      initialDelay:
                        description: Number of seconds after the container has started
                          before startup probes are initiated.
                        type: integer
                      path:
                        description: HTTP endpoint path that signals 200 OK if the
                          application has started successfully.
                        type: string
                      periodSeconds:
                        description: How often (in seconds) to perform the probe.
                        type: integer
                      port:
                        description: Port for the startup probe.
                        type: integer
                      timeout:
                        description: Number of seconds after which the probe times
                          out.
                        type: integer
                    required:
                    - path
                    type: object
                  minAvailable:
                    format: int32
                    type: integer
                  prometheus:
                    description: Prometheus is used to [scrape metrics from the pod](https://doc.nais.io/observability/metrics/).
                      Use this configuration to override the default values.
                    properties:
                      disabled:
                        description: Set this to true to disable
                        type: boolean
                      path:
                        default: /metricss
                        description: Set the path metrics are exposed on. Default
                          is '/metrics'
                        type: string
                      port:
                        default: 8080
                        description: Set the port you want to expose metrics on. Default
                          is '8080'
                        type: string
                    type: object
                  readiness:
                    description: Sometimes, applications are temporarily unable to
                      serve traffic. For example, an application might need to load
                      large data or configuration files during startup, or depend
                      on external services after startup. In such cases, you don't
                      want to kill the application, but you don’t want to send it
                      requests either. Kubernetes provides readiness probes to detect
                      and mitigate these situations. A pod with containers reporting
                      that they are not ready does not receive traffic through Kubernetes
                      Services. Read more about this over at the [Kubernetes readiness
                      documentation](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/).
                    properties:
                      failureThreshold:
                        description: When a Pod starts, and the probe fails, Kubernetes
                          will try _failureThreshold_ times before giving up. Giving
                          up in case of a startup probe means restarting the Pod.
                        type: integer
                      initialDelay:
                        description: Number of seconds after the container has started
                          before startup probes are initiated.
                        type: integer
                      path:
                        description: HTTP endpoint path that signals 200 OK if the
                          application has started successfully.
                        type: string
                      periodSeconds:
                        description: How often (in seconds) to perform the probe.
                        type: integer
                      port:
                        description: Port for the startup probe.
                        type: integer
                      timeout:
                        description: Number of seconds after which the probe times
                          out.
                        type: integer
                    required:
                    - path
                    type: object
                  resources:
                    description: When Containers have [resource requests](http://kubernetes.io/docs/user-guide/compute-resources/)
                      specified, the Kubernetes scheduler can make better decisions
                      about which nodes to place pods on.
                    properties:
                      limits:
                        description: Limit defines the maximum amount of resources
                          a container can use before getting evicted.
                        properties:
                          cpu:
                            pattern: ^\d+m?$
                            type: string
                          memory:
                            pattern: ^\d+[KMG]i$
                            type: string
                        type: object
                      requests:
                        description: Request defines the amount of resources a container
                          is allocated on startup.
                        properties:
                          cpu:
                            pattern: ^\d+m?$
                            type: string
                          memory:
                            pattern: ^\d+[KMG]i$
                            type: string
                        type: object
                    type: object
                  startup:
                    description: Kubernetes uses startup probes to know when a container
                      application has started. If such a probe is configured, it disables
                      liveness and readiness checks until it succeeds, making sure
                      those probes don't interfere with the application startup. This
                      can be used to adopt liveness checks on slow starting containers,
                      avoiding them getting killed by Kubernetes before they are up
                      and running.
                    properties:
                      failureThreshold:
                        description: When a Pod starts, and the probe fails, Kubernetes
                          will try _failureThreshold_ times before giving up. Giving
                          up in case of a startup probe means restarting the Pod.
                        type: integer
                      initialDelay:
                        description: Number of seconds after the container has started
                          before startup probes are initiated.
                        type: integer
                      path:
                        description: HTTP endpoint path that signals 200 OK if the
                          application has started successfully.
                        type: string
                      periodSeconds:
                        description: How often (in seconds) to perform the probe.
                        type: integer
                      port:
                        description: Port for the startup probe.
                        type: integer
                      timeout:
                        description: Number of seconds after which the probe times
                          out.
                        type: integer
                    required:
                    - path
                    type: object
                required:
                - image
                - minAvailable
                type: object
              replicas:
                properties:
                  cpuThresholdPercentage:
                    description: Amount of CPU usage before the autoscaler kicks in.
                    type: integer
                  max:
                    description: The pod autoscaler will increase replicas when required
                      up to the maximum.
                    type: integer
                  min:
                    description: The minimum amount of running replicas for a deployment.
                    type: integer
                type: object
              unsecuredebugdisableallaccesspolicies:
                type: boolean
            required:
            - pod
            type: object
          status:
            description: Status contains different NAIS status properties
            properties:
              conditions:
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    type FooStatus struct{     // Represents the observations of a
                    foo's current state.     // Known .status.conditions.type are:
                    \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type
                    \    // +patchStrategy=merge     // +listType=map     // +listMapKey=type
                    \    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`
                    \n     // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              correlationID:
                type: string
              deploymentRolloutStatus:
                type: string
              rolloutCompleteTime:
                format: int64
                type: integer
              synchronizationHash:
                type: string
              synchronizationState:
                type: string
              synchronizationTime:
                format: int64
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
